<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dffrnt.CoreValues" #>
<#@ import namespace="System.Linq" #>
<# foreach (var ns in model.usings) { #>
using <#= ns #>;
<# } #>
using Dffrnt.CoreValues;


namespace <#= model.ns #>
{
    [NiceName("<#= model.niceName #>")]
    [MenuPath("<#= model.menuPath #>")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Serializable]
    public class <#= model.className #> : IGameObjectCommand
    {
        <# foreach (var (type, name) in model.parameters) { #>
public Overrideable<<#= type #>> <#= name #>;
        <# } #>

        public void Invoke(<#= model.targetTypeName #> target) {
            <# foreach (var (type, name) in model.parameters) { #>
            if(<#= name #>.hasValue) target.<#= name #> = <#= name #>.value;
            <# } #>
        }
        
        public void Invoke(GameObject target)
        {
            if(_component == null)
                _component = target.GetComponent<<#= model.targetTypeName #>>();
            if (_component == null)
            {
                Debug.LogError("<#= model.className #>.Invoke: target does not have an <#= model.targetTypeName #> component.");
                return;
            }
            Invoke(_component);
        }
        
        private <#= model.targetTypeName #> _component;
    }
}
<#+
    public SerializedPropertySetterModel model;
#>